import { useEffect, useState } from "react";
import {
   Image,
   Pressable,
   ScrollView,
   StyleSheet,
   Text,
   TouchableOpacity,
   View,
} from "react-native";
import { Dropdown } from "react-native-element-dropdown";
import {
   BottomModal,
   ModalContent,
   ModalTitle,
   SlideAnimation,
} from "react-native-modals";
import { useNavigation, useRouter } from "expo-router";
import {
   addDoc,
   collection,
   onSnapshot,
   orderBy,
   query,
   where,
} from "firebase/firestore";
import DisplayIcon from "../../src/components/DisplayIcon";
import Likes from "../../src/components/Likes";
import Button from "../../src/components/controls/Button";
import ButtonOnOff from "../../src/components/controls/ButtonOnOff";
import Input from "../../src/components/controls/Input";
import NavBar from "../../src/components/controls/NavBar";
import COLORS from "../../src/constants/COLORS";
import Images from "../../src/constants/Images";
import { auth, db } from "../../src/data/Firebase";
import ExerciseSchema from "../../src/data/schemas/ExerciseSchema";
import { useExerciseStore } from "../../src/stores/ExerciseStore";
import { DateString, TimeSting } from "../../src/utils/Library";
import NewExercise from "./components/NewExercise";
// import {
//    DateFormat,
//    DateString,
//    DateTimeFormat,
//    TimeFormat,
//    TimeSting,
// } from "../../utils/Library";

const Exercise = () => {
   const navigation = useNavigation();
   const router = useRouter();

   const setCurrentExercise = useExerciseStore(
      (state) => state.setCurrentExercise
   );

   const [exerciseRecs, setExerciseRecs] = useState([]);
   const [newExerciseRec, setNewExerciseRec] = useState(ExerciseSchema);

   const [openNewExercise, setOpenNewExercise] = useState(false);
   const [category, setCategory] = useState("All");
   const [todos, setTodos] = useState([]);
   const [todo, setTodo] = useState("");

   const handleNewExercisePressed = () => {
      setOpenNewExercise(true);
   };
   // const handleSaveNewExercise = () => {
   //    const colRef = collection(db, "exercise");
   //    addDoc(colRef, newExerciseRec).then((res) => {
   //       let temp = { ...newExerciseRec, ["id"]: res.id };
   //       console.log(
   //          "Exercise.js - handleSaveNewExercise - newExerciseRec",
   //          newExerciseRec
   //       );

   //       router?.push({
   //          pathname: "/exercises/ExerciseDetail",
   //          params: newExerciseRec,
   //       });
   //       setNewExerciseRec(ExerciseSchema);
   //    });
   // };

   const fetchExercisesByUserUID = () => {
      // https://github.com/iamshaunjp/Getting-Started-with-Firebase-9/blob/lesson-9/src/index.js
      const colRef = collection(db, "exercise");
      const qPull = query(
         colRef,
         where("userUID", "==", auth.currentUser.uid),
         orderBy("exerciseDate", "desc")
      );

      onSnapshot(qPull, (snapshot) => {
         let records = [];
         snapshot.docs.forEach((doc) => {
            records.push({ ...doc.data(), id: doc.id });
         });
         console.log(records);

         setExerciseRecs(records);
      });
   };

   useEffect(() => {
      fetchExercisesByUserUID();
   }, []);

   return (
      <>
         <View style={{ height: 65 }}>
            <NavBar
               title="Exercise"
               backScreen="Home"
               backScreenPath="/Home"
            />
         </View>
         <ScrollView style={{ marginHorizontal: 10 }}>
            <View
               style={{
                  marginBottom: 10,
                  justifyContent: "space-between",
               }}
            >
               <View style={{ paddingVertical: 20 }}>
                  {exerciseRecs ? (
                     exerciseRecs.map((exercise, index) => (
                        <View key={index}>
                           <ExerciseCard exerciseRec={exercise} />
                        </View>
                     ))
                  ) : (
                     <Text>No exercise exists</Text>
                  )}
               </View>
            </View>
         </ScrollView>
         <View
            style={{
               position: "absolute",
               right: 0,
               bottom: 20,
               alignItems: "flex-end",
            }}
         >
            <TouchableOpacity
               style={{
                  marginRight: 30,
                  marginBottom: 20,
                  alignItems: "center",
                  justifyContent: "center",
                  backgroundColor: COLORS.lightBlue01,
                  borderRadius: 30,
               }}
               onPress={handleNewExercisePressed}
            >
               <DisplayIcon
                  iconName="pluscircleo"
                  iconFamily="AntDesign"
                  size={60}
                  color={COLORS.appBackground}
               />
            </TouchableOpacity>
         </View>
         <BottomModal
            onBackdropPress={() => setModalVisible(!isModalVisible)}
            onHardwareBackPress={() => setModalVisible(!isModalVisible)}
            swipeDirection={["up", "down"]}
            swipeThreshold={200}
            modalTitle={
               <ModalTitle
                  title="Add an Exercise"
                  style={{
                     backgroundColor: COLORS.lightBlue,
                  }}
               />
            }
            modalAnimation={
               new SlideAnimation({
                  slideFrom: "bottom",
               })
            }
            visible={openNewExercise}
            onTouchOutside={() => setModalVisible(!isModalVisible)}
         >
            <ModalContent style={{ width: "100%", height: 380 }}>
               <NewExercise
                  setOpenNewExercise={setOpenNewExercise}
                  newExerciseRec={newExerciseRec}
                  setNewExerciseRec={setNewExerciseRec}
                  handleSaveNewExercise={handleSaveNewExercise}
               />
            </ModalContent>
         </BottomModal>
      </>
   );
};

const ExerciseCard = ({ exerciseRec }) => {
   const router = useRouter();

   const currentExercise = useExerciseStore((state) => state.currentExercise);
   const setCurrentExercise = useExerciseStore(
      (state) => state.setCurrentExercise
   );

   const [exerciseDateString, setExerciseDateString] = useState("");
   const [exerciseTimeString, setExerciseTimeString] = useState("");
   const [routineRecs, setRoutineRecs] = useState([]);
   const [routineCount, setRoutineCount] = useState(0);
   const [showDetail, setShowDetail] = useState(false);
   const [feelings, setFeelings] = useState([]);

   const dataArray = [{ id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }, { id: 5 }];

   const handleFeeling = () => {
      var feelings = [];
      for (let i = 0; i < routineCount; i++) {
         feelings.push(<Image source={Images.thumbUp} />);
      }
      return;
   };
   const handleExerciseCardPressed = () => {
      setCurrentExercise(exerciseRec);
      // console.log("exerciseRec", exerciseRec);

      if (exerciseRec.status === "A") {
         router?.push({
            pathname: "/exercises/ExerciseDetail",
            params: exerciseRec,
         });
         // navigation.navigate("exerciseDetail", { exerciseRec: exerciseRec });
         // navigation.navigate("ExerciseDetail", {
         //    NewExercise: false,
         //    values: exerciseRec,
         //    routineRecs: routineRecs,
         // });
      } else {
         Alert.alert("Exercise Completed");
      }
   };
   const fetchRoutinesByExercise = () => {
      // https://github.com/iamshaunjp/Getting-Started-with-Firebase-9/blob/lesson-9/src/index.js
      const colRef = collection(db, `/exercise/${exerciseRec.id}/routines`);
      const qPull = query(colRef, orderBy("routineDate", "desc"));

      onSnapshot(qPull, (snapshot) => {
         let records = [];
         snapshot.docs.forEach((doc) => {
            records.push({
               ...doc.data(),
               id: doc.id,
            });
         });
         setRoutineRecs(records);
         setRoutineCount(records.length);
      });
   };
   useEffect(() => {
      setRoutineCount(0);
      setExerciseDateString(DateString(exerciseRec.exerciseDate));
      setExerciseTimeString(TimeSting(exerciseRec.exerciseDate));
      fetchRoutinesByExercise();
   }, []);

   return (
      <Pressable
         onPress={() => handleExerciseCardPressed()}
         style={{
            padding: 10,
            borderWidth: 0.2,
            borderRadius: 7,
            marginBottom: 10,
            paddingHorizontal: 15,
            backgroundColor:
               exerciseRec.status === "A"
                  ? COLORS.lightBlue01
                  : COLORS.lightGray01,
         }}
      >
         <View
            style={{
               alignItems: "flex-start",
               flexDirection: "row",
               paddingBottom: 10,
               marginBottom: 5,
               gap: 20,
               justifyContent: "space-between",
               borderBottomWidth: 0.5,
            }}
         >
            <View
               style={{
                  flexDirection: "row",
                  gap: 20,
               }}
            >
               <Text style={styles.headerLabelStyle}>{exerciseDateString}</Text>
               <Text style={styles.headerLabelStyle}>
                  {exerciseRec.locationName}
               </Text>
            </View>
            <Likes feelingCount={exerciseRec.feeling} />
         </View>
         <View style={{ gap: 10 }}>
            <View
               style={{
                  flexDirection: "row",
                  alignItems: "center",
                  justifyContent: "space-between",
                  gap: 15,
               }}
            >
               <View style={{ flexDirection: "row", gap: 10 }}>
                  <Text style={{ fontSize: 16 }}>{exerciseTimeString}</Text>
                  <View style={{ flexDirection: "row", gap: 5 }}>
                     {exerciseRec.duration === "D" ? (
                        <Text style={{ fontSize: 16 }}>
                           ({exerciseRec.duration})
                        </Text>
                     ) : (
                        <Text></Text>
                     )}
                  </View>
               </View>
               <View style={{ flexDirection: "row", gap: 5 }}>
                  <Text style={{ fontSize: 16, fontWeight: "bold" }}>
                     Weight
                  </Text>
                  <Text style={{ fontSize: 16 }}>{exerciseRec.weight}</Text>
                  <Text style={{ fontSize: 16, fontWeight: "bold" }}>lbs</Text>
               </View>
            </View>
            <View
               style={{
                  marginTop: 5,
                  flexDirection: "row",
                  alignItems: "center",
                  gap: 15,
               }}
            >
               <Text style={{ fontSize: 16, fontWeight: "bold" }}>
                  Focus area
               </Text>
               <Text style={{ fontSize: 16 }}>{exerciseRec.focusArea}</Text>
            </View>
         </View>
         <View>
            <View
               style={{
                  marginTop: 15,
                  flexDirection: "row",
                  alignItems: "center",
                  gap: 15,
                  justifyContent: "space-between",
               }}
            >
               {routineCount > 0 && (
                  <TouchableOpacity
                     onPress={() => setShowDetail(!showDetail)}
                     style={{
                        width: 50,
                        padding: 2,
                        backgroundColor: COLORS.grey,
                        borderRadius: 15,
                        flexDirection: "row",
                        gap: 5,
                        alignItems: "center",
                        justifyContent: "center",
                     }}
                  >
                     <Text style={{ fontSize: 16, textAlign: "center" }}>
                        {routineCount}
                     </Text>
                     {showDetail ? (
                        <Image
                           source={Images.upArrow}
                           style={{ width: 15, height: 15 }}
                        />
                     ) : (
                        <Image
                           source={Images.downArrow}
                           style={{ width: 15, height: 15 }}
                        />
                     )}
                  </TouchableOpacity>
               )}
            </View>
            {showDetail && (
               <ScrollView
                  style={{
                     marginHorizontal: 10,
                     marginTop: 5,
                     borderWidth: 0.25,
                     borderRadius: 7,
                  }}
               >
                  {routineRecs.length > 0 ? (
                     routineRecs.map((routine, index) => (
                        <View
                           key={index}
                           style={{
                              flexDirection: "row",
                              gap: 10,
                              padding: 1,
                              backgroundColor:
                                 index % 2 === 0 ? COLORS.grey : null,
                              justifyContent: "space-between",
                           }}
                        >
                           <View style={{ flexDirection: "row" }}>
                              <Text style={{ marginHorizontal: 5 }}>
                                 {index + 1}
                              </Text>
                              {routine.name ? (
                                 <Text style={{ width: 80 }}>
                                    {routine.name}
                                 </Text>
                              ) : (
                                 <Text style={{ width: 80 }}></Text>
                              )}
                              {routine.weight ? (
                                 <Text
                                    style={{ width: 50, textAlign: "right" }}
                                 >
                                    {routine.weight}lbs
                                 </Text>
                              ) : (
                                 <Text style={{ width: 50 }}></Text>
                              )}
                              {routine.reps ? (
                                 <Text
                                    style={{ width: 40, textAlign: "right" }}
                                 >
                                    {routine.reps}x
                                 </Text>
                              ) : (
                                 <Text style={{ width: 40 }}></Text>
                              )}
                           </View>
                           <Likes feelingCount={routine.feeling} />
                        </View>
                     ))
                  ) : (
                     <Text>No exercise exists</Text>
                  )}
               </ScrollView>
            )}
         </View>
      </Pressable>
   );
};

export default Exercise;

const styles = StyleSheet.create({
   container: {
      backgroundColor: "white",
      padding: 5,
   },
   dropdown: {
      height: 40,
      borderColor: "gray",
      borderWidth: 0.5,
      borderRadius: 8,
      paddingHorizontal: 8,
      width: 300,
   },
   icon: {
      marginRight: 5,
   },
   label: {
      position: "absolute",
      backgroundColor: "white",
      top: -10,
      zIndex: 999,
      fontSize: 14,
   },
   placeholderStyle: {
      fontSize: 16,
   },
   selectedTextStyle: {
      fontSize: 16,
   },
   iconStyle: {
      width: 20,
      height: 20,
   },
   inputSearchStyle: {
      height: 40,
      fontSize: 16,
   },

   newExerciseStyle: {
      borderWidth: 0.25,
      marginTop: -30,
      marginHorizontal: 30,
      borderRadius: 10,
      backgroundColor: "#f0f0f0",
   },
   dialogHeaderStyle: {
      padding: 10,
      backgroundColor: COLORS.grey,
      borderTopLeftRadius: 10,
      borderTopRightRadius: 10,
      alignItems: "center",
   },
   exerciseCardStyle: {
      padding: 10,
      borderWidth: 0.2,
      borderRadius: 7,
      backgroundColor: COLORS.lightGrey,
      marginBottom: 10,
   },
   exerciseCardHeaderStyle: {
      alignItems: "flex-start",
      flexDirection: "row",
      marginBottom: 5,
      gap: 20,
      justifyContent: "space-between",
   },
   exerciseCardBodyStyle: { marginHorizontal: 10 },
   exerciseCardBodyRowStyle: {
      flexDirection: "row",
      alignItems: "center",
      justifyContent: "space-between",
      gap: 15,
   },
   exerciseCardListStyle: {
      marginHorizontal: 10,
      marginTop: 5,
      borderWidth: 0.25,
      borderRadius: 7,
   },
   headerLabelStyle: { fontSize: 18, fontWeight: "600" },
   headerTextStyle: { fontSize: 18 },
});
